API (Application Programming Interfaces) წარმოადგენს მედიატორს კლიენტსა და სერვერს შორის,
მისი მეშვეობით შესაძლებელია ინფორმაციის გაცვლა ორ სხვადასხვა დამოუკიდებელ software-ს
შორის.
✲ API-ის მაგალითებია:
▪ ამინდის პროგნოზის საიტიდან მონაცემების გაგზავნა სხვა საიტზე და განთავსება
▪ საერთაშრისო ფრენების, სასტუმროების შესახებ ინფორმაციის განთავსება სამოგზაურო საიტებზე
▪ Youtube-ის ვიდეოების ჩასმა (Embedding) სხვა საიტზე
API-ს მეშვეობით ვიღებთ ჩვენთვის საჭირო მონაცემებს (data) სერვერიდან, რისთვისაც საჭიროა
რომ შევქმნათ request
✲ სერვერთან სამუშაოდ python-ში გვჭირდება შესაბამისი მოდული requests. pip list ბრძანების
გამოყენებით შეგიძლიათ ნახოთ არის თუ არა requests მოდული დაყენებული; თუ არ გაქვთ,
დააყენეთ შემდეგი ბრძანების გამოყენებით pip install requests
✲ მოდულის დოკუმენტაცია: https://docs.python-requests.org/en/master/
✲ სერვერსა და კლინეტს შორის ინფორმაციის გაცვლა ხდება HTTP პროტოკოლის მიერ.
•GET: აბრუნებს საჭირო ინფორმაციას სერვერიდან, რომელიც
შესაძლებელია API-ს გამოყენებით იყოს ხელმისაწვდომი.
•POST: ამატებს ინფორმაციას სერვერზე. მაგ. მისი სასუალებით
შესაძლებელია დაემატოს მომხმარებელი თავისი პირადი ინფორმაციით
სარეგისტრაციო ფორმის შევსების გზით.
•PUT: ცვლის არსებულ ინფორმაციას. მაგ. მისი საშუალებით
შესაძლებელია პროდუქტის მახასიატებლების ცვლილება.
•DELETE: შლის არსებულ ინფორმაციას
HTTP (Hypertext Transfer Protocol) წარმოადგენს საკომუნიკაციო არხს კლიენტსა და სერვერს შორის. იგი გულისხმობს
სერვერზე request-ის გაგზავნას და სერვერიდან response-ის მიღებას.
✲ ყველაზე ხშირად გამოყენებადი HTTP მეთოდებია: GET და POST
✲ GET გამოიყენება მაშინ, როდესაც request-ის გაგზავნა ხდება URL-ის მეშვეობით. შესაბამისად, URL-ში ეთითება
საჭირო პარამეტრები (პარამეტრის სახელი და მნიშნველობა). გამოიყენება ‘&’ სიმბოლო პარამეტრების
ერთმანეთისგან გამოსაყოფად და ‘?’ ძირითადი მისამართისა და პარამეტრების ერთმანეთისგან გამოსაყოფად

✲ GET-ით შესაძლებელია ლიმიტირებული მონაცემების გაგზავნა სერვერზე, იგი რჩება ბრაუზერის history-ში,
გადაცემული ინფორმაცია ხილვადია ყველასთვის (არ გამოიყენება დაფარული ინფორმაციის გადასაცემად)
✲ POST გამოიყენება მონაცემების გასაგზავნად სერვერზე, რომლის შენახვა უნდა მოხდეს ბაზაში (ან სხვა რესურში).
POST მეთოდი გამოიყენება ფორმებში შეყვანილი ინფორმაციის სერვერზე გასაგზავნად.
✲ POST მეთოდის ელემენტები არ არის ხილვადი, არ ხდება მისი ქეშირება, არ რჩება ბრაუზერის history-ში, მისი
ელემენტების სიგრძე არ არის ლიმიტირებული.
requests მოდულში არის get() ფუნქცია, რომელსაც პარამეტრად გადაეცემა url და გვიბრუნებს
პასუხად http სტატუსის კოდს. მაგ. <Response [200]> პასუხი ნიშნავს, რომ წარმატებით
დაუკავშირდა სერვერს. შესაძლებელია სერვერიდან დაბრუნდეს სხვა პასუხი: მაგ. 301. 404, 502
✲ Response-ის კოდზე წვდომა შესაძლებელია status_code-ის გამოყენებით
✲ დაბრუნებულ ობიექტს შეგვიძლია მივმართოთ text ატრიბუტით, რომელიც გვიბრუნებს საიტის
html კოდს.
get() ფუნქცია აბრუნებს Response კლასის ობიექტს, რომელიც წარმოადგენს სერვერიდან
მიღებულ პასუხს. მას გააჩნია სხვადასხვა პარამეტრები:
✲ Status_code - სერვერიდან მიღებული პასუხის სტატუსი (იხილეთ მომდევნო სლაიდზე)
✲ headers - სერვერიდან მიღებული პასუხის დამატებითი ინფორმაცია. მაგ. სერვერის დასახლება, კონტენტის
ტიპი, ა.შ. შედეგი არის dict ტიპის.
✲ text – Response-ის შიგთავსი წარმოდგენილი ტექსტის სახით
✲ Content - Response-ის შიგთავსი (არა ტექსტური მონაცემებისთვის, მაგ. სურათი)
ზოგიერთი საიტი უზრუნველყოფს API-ს (Application Programming Interfaces), რომელიც
საშუალებას გვაძლევს მივწვდეთ საიტზე არსებულ ინფორმაციას წინასწარ განსაზღვრული
გზით. API-ის მეშვეობით, თავიდან ვირიდებთ HTML-ის პარსინგს და მონაცემებზე წვდომა
გვაქვს JSON და XML ფორმატის გამოყენებით.
✲ API-ის გამოყენებისას საჭიროა შესაბამისი დოკუმენტაციის გარჩევა
✲ მაგალითად, ძალიან პოპულარულია ამინდის პროგნოზის API. https://openweathermap.org/api
საიტი უზრუნველყოფს API key-ს, რომელიც მიეთითება კოდში და დოკუმენტაციის გამოყენებით
შესაძლებელია პროგრამაში მიეთითოს რომელი ქალაქის ამინდის პროგნოზის წამოღება გვსურს.
შესაბამისად ავაწყობთ URL-ს, ვაგზავნით get requests, და შედეგად ვიღებთ json ფაილს.
r = requests.get() ფუნქციით დაბრუნებული json ფაილის კონტენტის წასაკითხად, შეგვიძლია
გამოვიყენოთ როგორც r.text რომელიც გვიბრუნებს json ფაილს სტრიქონის სახით, ასევე r.json()
ფუნქცია, რომელიც გვიბრუნებს json ფაილს dict სახით.
✲ პითონში json ფაილთან სამუშაოდ შესაძლოა გამოვიყენოთ json ბიბლიოთეკა, რომლის
მეშვეობითაც უფრო გამარტივებულია მოქმედებები.
✲ Json მოდულის დოკუმენტაცია: https://docs.python.org/3/library/json.html
✲ Json მოდულიდან შეგვიძლია გამოვიყენოთ ფუნქცია loads(), რომელიც ტექსტურ მონაცემს
(რომელშიც მოთავსებულია json ობიექტი) გარდაქმნის პითონის dict ობიექტად. შედეგად
შეგვიძლია, json-ის მონაცემები წავიკითხოთ dict-ის მეშვეობით. ანალოგიურად, არსებობს load()
ფუნქცია, რომელსაც პარამეტრად გადაეცემა არა სტრიქონი არამედ ფაილი და ფაილში
არსებულ json ობიექტს გარდაქმნის პითონის ობიექტად (dict).
✲ პითონში json ობიექტის დაბეჭდვისას, შედეგი იბეჭდება ერთ ხაზზე და json-ის სტრუქტურის
აღქმა გაძნელებულია. იმისათვის რომ უფრო ლამაზად გამოვიტანოთ ეკრანზე, რაც
გაგვიადვილებს შემდეგ მასზე მუშაობას, უმჯობესია გამოვიყენოთ dumps() ფუნქცია, სადაც
პირველ პარამეტრად გადაეცემა json-ის ობიექტი, ხოლო მეორე ატრიბუტად უნდა გადავცეთ
indent შესაბამისი მნიშვნელობით. მაგ. res_structured = json.dumps(res, indent=4). შედეგად ვიღებთ
json ფორმატით ჩაწერილ სტრიქონის ობიექტს და ვიზულაურად სტრუქტურირებულია.
ანალოგიურად, არსებობს dump() ფუნქცია, რომელსაც მეორე პრამეტრად გადაეცემა ფაილის
დასახელება, და ახდენს ფაილში json ობიექტად ინფორმაციის ჩაწერას. თუ გადაეცემა indent
პარამეტერი, შედეგი იქნება ვიზუალურად სტრუქტურირებული. გამოიყენება json ფაილის
შესაქმნელად.
✲ იხილეთ ამოცანა მომდევნო სლაიდზე და Classwork.py ფაილში

